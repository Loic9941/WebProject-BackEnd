// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20250529121207_Add_users")]
    partial class Add_users
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RatingId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RatingId")
                        .IsUnique();

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Domain.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeliveryPartnerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryPartnerId");

                    b.HasIndex("UserId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Domain.InvoiceItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("EstimatedDeliveryDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("InTransitAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PickedUpAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReadyToBePickedUp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("InvoiceItems");
                });

            modelBuilder.Entity("Domain.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Domain.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("InvoiceItemId")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceItemId")
                        .IsUnique();

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "client1@test.be",
                            Firstname = "Bernard",
                            Lastname = "Lacheteur",
                            PasswordHash = "D6B1EEBBA6E4556DA0E2",
                            Role = "Customer",
                            Salt = "Thursday"
                        },
                        new
                        {
                            Id = 2,
                            Email = "client2@test.be",
                            Firstname = "Fred",
                            Lastname = "Duclient",
                            PasswordHash = "D6B1EEBBA6E4556DA0E2",
                            Role = "Customer",
                            Salt = "Thursday"
                        },
                        new
                        {
                            Id = 3,
                            Email = "admin@test.be",
                            Firstname = "Gérard",
                            Lastname = "Ladmin",
                            PasswordHash = "D6B1EEBBA6E4556DA0E2",
                            Role = "Administrator",
                            Salt = "Thursday"
                        },
                        new
                        {
                            Id = 4,
                            Email = "dhl@test.be",
                            Firstname = "DHL",
                            Lastname = "DHL",
                            PasswordHash = "D6B1EEBBA6E4556DA0E2",
                            Role = "DeliveryPartner",
                            Salt = "Thursday"
                        },
                        new
                        {
                            Id = 5,
                            Email = "bpost@test.be",
                            Firstname = "Bpost",
                            Lastname = "Bpost",
                            PasswordHash = "D6B1EEBBA6E4556DA0E2",
                            Role = "DeliveryPartner",
                            Salt = "Thursday"
                        },
                        new
                        {
                            Id = 6,
                            Email = "artiste1@test.be",
                            Firstname = "Rodin",
                            Lastname = "Bpost",
                            PasswordHash = "D6B1EEBBA6E4556DA0E2",
                            Role = "Artisan",
                            Salt = "Thursday"
                        },
                        new
                        {
                            Id = 7,
                            Email = "artiste2@test.be",
                            Firstname = "Leonard",
                            Lastname = "De vinci",
                            PasswordHash = "D6B1EEBBA6E4556DA0E2",
                            Role = "Artisan",
                            Salt = "Thursday"
                        },
                        new
                        {
                            Id = 8,
                            Email = "artiste3@test.be",
                            Firstname = "Salvador",
                            Lastname = "Dali",
                            PasswordHash = "D6B1EEBBA6E4556DA0E2",
                            Role = "Artisan",
                            Salt = "Thursday"
                        });
                });

            modelBuilder.Entity("Domain.Comment", b =>
                {
                    b.HasOne("Domain.Rating", "Rating")
                        .WithOne("Comment")
                        .HasForeignKey("Domain.Comment", "RatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("Domain.Invoice", b =>
                {
                    b.HasOne("Domain.User", "DeliveryPartner")
                        .WithMany()
                        .HasForeignKey("DeliveryPartnerId");

                    b.HasOne("Domain.User", "User")
                        .WithMany("Invoices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DeliveryPartner");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.InvoiceItem", b =>
                {
                    b.HasOne("Domain.Invoice", "Invoice")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.User", "User")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Product", b =>
                {
                    b.HasOne("Domain.User", "User")
                        .WithMany("Products")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Rating", b =>
                {
                    b.HasOne("Domain.InvoiceItem", "InvoiceItem")
                        .WithOne("Rating")
                        .HasForeignKey("Domain.Rating", "InvoiceItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvoiceItem");
                });

            modelBuilder.Entity("Domain.Invoice", b =>
                {
                    b.Navigation("InvoiceItems");
                });

            modelBuilder.Entity("Domain.InvoiceItem", b =>
                {
                    b.Navigation("Rating");
                });

            modelBuilder.Entity("Domain.Product", b =>
                {
                    b.Navigation("InvoiceItems");
                });

            modelBuilder.Entity("Domain.Rating", b =>
                {
                    b.Navigation("Comment");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Navigation("InvoiceItems");

                    b.Navigation("Invoices");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
