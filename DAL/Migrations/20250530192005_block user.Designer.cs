// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20250530192005_block user")]
    partial class blockuser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RatingId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RatingId")
                        .IsUnique();

                    b.ToTable("Comment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 5, 29, 17, 43, 43, 0, DateTimeKind.Unspecified),
                            RatingId = 1,
                            Text = "Merci pour votre commentaire positif !"
                        });
                });

            modelBuilder.Entity("Domain.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeliveryPartnerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryPartnerId");

                    b.HasIndex("UserId");

                    b.ToTable("Invoices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 5, 29, 14, 46, 41, 0, DateTimeKind.Unspecified),
                            DeliveryPartnerId = 4,
                            PaidAt = new DateTime(2025, 5, 29, 14, 46, 41, 0, DateTimeKind.Unspecified),
                            Status = "Paid",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Domain.InvoiceItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("EstimatedDeliveryDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("InTransitAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PickedUpAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReadyToBePickedUp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("InvoiceItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 5, 29, 15, 40, 18, 0, DateTimeKind.Unspecified),
                            InvoiceId = 1,
                            Name = "Armoire à vin",
                            ProductId = 8,
                            Quantity = 1,
                            Status = "inPreparation",
                            UnitPrice = 800.00m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 5, 29, 15, 40, 28, 0, DateTimeKind.Unspecified),
                            InTransitAt = new DateTime(2025, 5, 29, 17, 41, 38, 0, DateTimeKind.Unspecified),
                            InvoiceId = 1,
                            Name = "Bord de mer",
                            ProductId = 2,
                            Quantity = 1,
                            Status = "readyToBePickedUp",
                            UnitPrice = 245.00m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 5, 29, 15, 40, 34, 0, DateTimeKind.Unspecified),
                            EstimatedDeliveryDate = new DateOnly(2025, 3, 8),
                            InvoiceId = 1,
                            Name = "Coucher de soleil sur le fleuve",
                            PickedUpAt = new DateTime(2025, 5, 29, 17, 43, 3, 0, DateTimeKind.Unspecified),
                            ProductId = 1,
                            Quantity = 1,
                            ReadyToBePickedUp = new DateTime(2025, 5, 29, 17, 41, 33, 0, DateTimeKind.Unspecified),
                            Status = "pickedUp",
                            UnitPrice = 500.00m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 5, 29, 15, 40, 39, 0, DateTimeKind.Unspecified),
                            InvoiceId = 1,
                            Name = "Meuble de salon",
                            ProductId = 7,
                            Quantity = 1,
                            Status = "inPreparation",
                            UnitPrice = 1200.00m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 5, 29, 15, 40, 44, 0, DateTimeKind.Unspecified),
                            InvoiceId = 1,
                            Name = "Meuble TV",
                            ProductId = 9,
                            Quantity = 1,
                            Status = "inPreparation",
                            UnitPrice = 900.00m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 5, 29, 15, 40, 48, 0, DateTimeKind.Unspecified),
                            DeliveredAt = new DateTime(2025, 5, 29, 17, 42, 38, 0, DateTimeKind.Unspecified),
                            EstimatedDeliveryDate = new DateOnly(2025, 3, 6),
                            InTransitAt = new DateTime(2025, 5, 29, 17, 42, 34, 0, DateTimeKind.Unspecified),
                            InvoiceId = 1,
                            Name = "Peinture abstraite",
                            PickedUpAt = new DateTime(2025, 5, 29, 17, 42, 24, 0, DateTimeKind.Unspecified),
                            ProductId = 3,
                            Quantity = 1,
                            ReadyToBePickedUp = new DateTime(2025, 5, 29, 17, 41, 28, 0, DateTimeKind.Unspecified),
                            Status = "delivered",
                            UnitPrice = 300.00m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 5, 29, 15, 40, 53, 0, DateTimeKind.Unspecified),
                            InvoiceId = 1,
                            Name = "Pot antique",
                            ProductId = 5,
                            Quantity = 1,
                            Status = "inPreparation",
                            UnitPrice = 65.00m,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Domain.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Available = true,
                            Category = "Peinture",
                            CreatedAt = new DateTime(2025, 5, 29, 14, 46, 41, 0, DateTimeKind.Unspecified),
                            Description = "Peinture sur toile datant de 1920",
                            Image = "/images/491eea5e-ba08-46b5-8404-f73bce32f872_A1QdHDA29ML._AC_UF1000,1000_QL80_.jpg",
                            Name = "Coucher de soleil sur le fleuve",
                            Price = 500m,
                            UserId = 6
                        },
                        new
                        {
                            Id = 2,
                            Available = true,
                            Category = "Peinture",
                            CreatedAt = new DateTime(2025, 5, 29, 16, 43, 43, 0, DateTimeKind.Unspecified),
                            Description = "Aquarelle datant de 1963",
                            Image = "/images/3bcd32f9-5452-427a-8219-2f863051a08f_images.jpg",
                            Name = "Bord de mer",
                            Price = 245m,
                            UserId = 6
                        },
                        new
                        {
                            Id = 3,
                            Available = true,
                            Category = "Peinture",
                            CreatedAt = new DateTime(2025, 5, 29, 17, 43, 43, 0, DateTimeKind.Unspecified),
                            Description = "Peinture abstraite aux tonalités bleues inspirantes",
                            Image = "/images/8067df12-c43a-4ed6-92d1-c691d1be1954_peinture abstraite moderne bleue.jpg",
                            Name = "Peinture abstraite",
                            Price = 300m,
                            UserId = 6
                        },
                        new
                        {
                            Id = 4,
                            Available = true,
                            Category = "Poterie",
                            CreatedAt = new DateTime(2025, 5, 29, 18, 43, 43, 0, DateTimeKind.Unspecified),
                            Description = "Pot en céramique émaillée noir artisanal. Parfait pour mettre vos plantest",
                            Image = "/images/393a53fa-20ae-4ff9-a781-83407db2b29b_pot-en-ceramique-emaillee-noir-o-39-x-31-cm.jpg",
                            Name = "Pot en céramique émaillée",
                            Price = 75m,
                            UserId = 8
                        },
                        new
                        {
                            Id = 5,
                            Available = true,
                            Category = "Poterie",
                            CreatedAt = new DateTime(2025, 5, 29, 19, 43, 43, 0, DateTimeKind.Unspecified),
                            Description = "Pot en terre cuite avec motifs",
                            Image = "/images/bd71d69e-9734-4425-9fea-469dc5628a6c_images (1).jpg",
                            Name = "Pot antique",
                            Price = 65m,
                            UserId = 8
                        },
                        new
                        {
                            Id = 6,
                            Available = true,
                            Category = "Poterie",
                            CreatedAt = new DateTime(2025, 5, 29, 20, 43, 43, 0, DateTimeKind.Unspecified),
                            Description = "Pot de la couleur du soleil. Parfait pour apporter de la lumière dans votre maison",
                            Image = "/images/26d077dd-4efb-43e4-8741-c483e6111be6_images (2).jpg",
                            Name = "Poterie soleil",
                            Price = 50m,
                            UserId = 8
                        },
                        new
                        {
                            Id = 7,
                            Available = true,
                            Category = "Menuiserie",
                            CreatedAt = new DateTime(2025, 5, 29, 21, 43, 43, 0, DateTimeKind.Unspecified),
                            Description = "Meuble de salon fait main en chêne véritable",
                            Image = "/images/edbb4f5f-f889-41d8-b394-22791ea8e198_110.jpg",
                            Name = "Meuble de salon",
                            Price = 1200m,
                            UserId = 7
                        },
                        new
                        {
                            Id = 8,
                            Available = true,
                            Category = "Menuiserie",
                            CreatedAt = new DateTime(2025, 5, 29, 22, 43, 43, 0, DateTimeKind.Unspecified),
                            Description = "Armoire à vin en bois de cèdre assemblée à la main. Parfait pour stocker vos bouteilles.",
                            Image = "/images/61ddf700-3b6b-4771-bca3-ffbd415adf1a_550x366.jpg",
                            Name = "Armoire à vin",
                            Price = 800m,
                            UserId = 7
                        },
                        new
                        {
                            Id = 9,
                            Available = true,
                            Category = "Menuiserie",
                            CreatedAt = new DateTime(2025, 5, 29, 23, 43, 43, 0, DateTimeKind.Unspecified),
                            Description = "Meuble TV en bois de placage de frene naturel. Teinte noisette",
                            Image = "/images/2abf68ee-d6a6-4789-b9a7-b28d319f453e_meuble-tv-en-bois-de-placage-de-frene-naturel-en-teinte-noisette-en-plusieurs-tailles.jpg",
                            Name = "Meuble TV",
                            Price = 900m,
                            UserId = 7
                        },
                        new
                        {
                            Id = 10,
                            Available = true,
                            Category = "Sculpture",
                            CreatedAt = new DateTime(2025, 5, 30, 21, 43, 43, 0, DateTimeKind.Unspecified),
                            Description = "Sculpture ours polaire de 1m de hauteur",
                            Image = "/images/4011b3dc-8808-4f91-8ac7-20f1c6a9c410_images (3).jpg",
                            Name = "Sculpture ours polaire",
                            Price = 1500m,
                            UserId = 7
                        });
                });

            modelBuilder.Entity("Domain.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("InvoiceItemId")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceItemId")
                        .IsUnique();

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 5, 29, 17, 43, 43, 0, DateTimeKind.Unspecified),
                            InvoiceItemId = 6,
                            Rate = 5,
                            Text = "Très belle peinture, livraison rapide !"
                        });
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "client1@test.be",
                            Firstname = "Bernard",
                            IsBlocked = false,
                            Lastname = "Lacheteur",
                            PasswordHash = "D6B1EEBBA6E4556DA0E2",
                            Role = "Customer",
                            Salt = "Thursday"
                        },
                        new
                        {
                            Id = 2,
                            Email = "client2@test.be",
                            Firstname = "Fred",
                            IsBlocked = false,
                            Lastname = "Duclient",
                            PasswordHash = "D6B1EEBBA6E4556DA0E2",
                            Role = "Customer",
                            Salt = "Thursday"
                        },
                        new
                        {
                            Id = 3,
                            Email = "admin@test.be",
                            Firstname = "Gérard",
                            IsBlocked = false,
                            Lastname = "Ladmin",
                            PasswordHash = "D6B1EEBBA6E4556DA0E2",
                            Role = "Administrator",
                            Salt = "Thursday"
                        },
                        new
                        {
                            Id = 4,
                            Email = "dhl@test.be",
                            Firstname = "DHL",
                            IsBlocked = false,
                            Lastname = "DHL",
                            PasswordHash = "D6B1EEBBA6E4556DA0E2",
                            Role = "DeliveryPartner",
                            Salt = "Thursday"
                        },
                        new
                        {
                            Id = 5,
                            Email = "bpost@test.be",
                            Firstname = "Bpost",
                            IsBlocked = false,
                            Lastname = "Bpost",
                            PasswordHash = "D6B1EEBBA6E4556DA0E2",
                            Role = "DeliveryPartner",
                            Salt = "Thursday"
                        },
                        new
                        {
                            Id = 6,
                            Email = "artiste1@test.be",
                            Firstname = "Rodin",
                            IsBlocked = false,
                            Lastname = " ",
                            PasswordHash = "D6B1EEBBA6E4556DA0E2",
                            Role = "Artisan",
                            Salt = "Thursday"
                        },
                        new
                        {
                            Id = 7,
                            Email = "artiste2@test.be",
                            Firstname = "Leonard",
                            IsBlocked = false,
                            Lastname = "De vinci",
                            PasswordHash = "D6B1EEBBA6E4556DA0E2",
                            Role = "Artisan",
                            Salt = "Thursday"
                        },
                        new
                        {
                            Id = 8,
                            Email = "artiste3@test.be",
                            Firstname = "Salvador",
                            IsBlocked = false,
                            Lastname = "Dali",
                            PasswordHash = "D6B1EEBBA6E4556DA0E2",
                            Role = "Artisan",
                            Salt = "Thursday"
                        });
                });

            modelBuilder.Entity("Domain.Comment", b =>
                {
                    b.HasOne("Domain.Rating", "Rating")
                        .WithOne("Comment")
                        .HasForeignKey("Domain.Comment", "RatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("Domain.Invoice", b =>
                {
                    b.HasOne("Domain.User", "DeliveryPartner")
                        .WithMany()
                        .HasForeignKey("DeliveryPartnerId");

                    b.HasOne("Domain.User", "User")
                        .WithMany("Invoices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DeliveryPartner");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.InvoiceItem", b =>
                {
                    b.HasOne("Domain.Invoice", "Invoice")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.User", "User")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Product", b =>
                {
                    b.HasOne("Domain.User", "User")
                        .WithMany("Products")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Rating", b =>
                {
                    b.HasOne("Domain.InvoiceItem", "InvoiceItem")
                        .WithOne("Rating")
                        .HasForeignKey("Domain.Rating", "InvoiceItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvoiceItem");
                });

            modelBuilder.Entity("Domain.Invoice", b =>
                {
                    b.Navigation("InvoiceItems");
                });

            modelBuilder.Entity("Domain.InvoiceItem", b =>
                {
                    b.Navigation("Rating");
                });

            modelBuilder.Entity("Domain.Product", b =>
                {
                    b.Navigation("InvoiceItems");
                });

            modelBuilder.Entity("Domain.Rating", b =>
                {
                    b.Navigation("Comment");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Navigation("InvoiceItems");

                    b.Navigation("Invoices");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
